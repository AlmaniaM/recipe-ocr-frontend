/**
 * Storage Repository Interface
 * 
 * Defines the contract for local storage operations related to
 * image synchronization. Handles persistence of sync records,
 * URL caching, and offline data management.
 */

import { Result } from '../../domain/common/Result';
import { ImageSyncRecord } from '../../domain/entities/ImageSyncRecord';

export interface IStorageRepository {
  /**
   * Gets sync record for a specific image URI
   * @param localUri - Local file URI
   * @returns Sync record or null if not found
   */
  getImageSync(localUri: string): Promise<ImageSyncRecord | null>;
  
  /**
   * Gets sync record by filename
   * @param fileName - The filename generated by backend
   * @returns Sync record or null if not found
   */
  getImageSyncByFileName(fileName: string): Promise<ImageSyncRecord | null>;
  
  /**
   * Saves or updates a sync record
   * @param syncRecord - The sync record to save
   * @returns Result indicating success or failure
   */
  saveImageSync(syncRecord: ImageSyncRecord): Promise<Result<void>>;
  
  /**
   * Gets all sync records
   * @returns Array of all sync records
   */
  getAllImageSyncs(): Promise<ImageSyncRecord[]>;
  
  /**
   * Gets sync records for a specific recipe
   * @param recipeId - Recipe ID
   * @returns Array of sync records for the recipe
   */
  getImageSyncsForRecipe(recipeId: string): Promise<ImageSyncRecord[]>;
  
  /**
   * Deletes sync record for a specific image URI
   * @param localUri - Local file URI
   * @returns Result indicating success or failure
   */
  deleteImageSync(localUri: string): Promise<Result<void>>;
  
  /**
   * Deletes all sync records for a recipe
   * @param recipeId - Recipe ID
   * @returns Result indicating success or failure
   */
  deleteImageSyncsForRecipe(recipeId: string): Promise<Result<void>>;
  
  /**
   * Gets cached image URL
   * @param fileName - The filename
   * @returns Cached URL or null if not cached
   */
  getCachedImageUrl(fileName: string): Promise<string | null>;
  
  /**
   * Caches an image URL
   * @param fileName - The filename
   * @param url - The URL to cache
   * @returns Result indicating success or failure
   */
  cacheImageUrl(fileName: string, url: string): Promise<Result<void>>;
  
  /**
   * Clears cached URL for a filename
   * @param fileName - The filename
   * @returns Result indicating success or failure
   */
  clearCachedImageUrl(fileName: string): Promise<Result<void>>;
  
  /**
   * Clears all cached URLs
   * @returns Result indicating success or failure
   */
  clearAllCachedUrls(): Promise<Result<void>>;
  
  /**
   * Gets the size of cached data
   * @returns Approximate size in bytes
   */
  getCacheSize(): Promise<number>;
  
  /**
   * Cleans up expired cache entries
   * @param maxAge - Maximum age in milliseconds
   * @returns Result indicating success or failure
   */
  cleanupExpiredCache(maxAge?: number): Promise<Result<void>>;
}
