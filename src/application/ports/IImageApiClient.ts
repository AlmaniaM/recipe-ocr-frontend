/**
 * Image API Client Interface
 * 
 * Defines the contract for API communication with the backend
 * image storage service. Handles image upload, URL retrieval,
 * and metadata operations.
 */

import { Result } from '../../domain/common/Result';

export interface ImageUploadResponse {
  fileName: string;
  fileSize: number;
  contentType: string;
  uploadUrl?: string;
}

export interface ImageUrlResponse {
  url: string;
  expiresAt?: Date;
}

export interface ImageMetadataResponse {
  fileName: string;
  fileSize: number;
  contentType: string;
  createdAt: Date;
  lastModified: Date;
}

export interface IImageApiClient {
  /**
   * Uploads an image to cloud storage
   * @param imageUri - Local file URI
   * @param recipeId - Associated recipe ID
   * @returns Result containing upload response
   */
  uploadImage(imageUri: string, recipeId: string): Promise<Result<ImageUploadResponse>>;
  
  /**
   * Gets the cloud URL for an image
   * @param fileName - The filename generated by backend
   * @returns Result containing URL response
   */
  getImageUrl(fileName: string): Promise<Result<ImageUrlResponse>>;
  
  /**
   * Gets metadata for an image
   * @param fileName - The filename
   * @returns Result containing metadata response
   */
  getImageMetadata(fileName: string): Promise<Result<ImageMetadataResponse>>;
  
  /**
   * Deletes an image from cloud storage
   * @param fileName - The filename to delete
   * @returns Result indicating success or failure
   */
  deleteImage(fileName: string): Promise<Result<void>>;
  
  /**
   * Checks if an image exists in cloud storage
   * @param fileName - The filename to check
   * @returns Result containing boolean indicating existence
   */
  imageExists(fileName: string): Promise<Result<boolean>>;
  
  /**
   * Gets multiple image URLs in batch
   * @param fileNames - Array of filenames
   * @returns Result containing array of URL responses
   */
  getImageUrls(fileNames: string[]): Promise<Result<ImageUrlResponse[]>>;
}
