/**
 * Image Sync Service Interface
 * 
 * Defines the contract for image synchronization between local device
 * and cloud storage. Handles sync operations, status tracking, and
 * offline mode support.
 */

import { Result } from '../../domain/common/Result';
import { ImageSyncRecord } from '../../domain/entities/ImageSyncRecord';
import { SyncStatus } from '../../domain/entities/SyncStatus';

export interface IImageSyncService {
  /**
   * Synchronizes an image to cloud storage
   * @param imageUri - Local file URI of the image
   * @param recipeId - Associated recipe ID
   * @returns Result containing the generated filename on success
   */
  syncImage(imageUri: string, recipeId: string): Promise<Result<string>>;
  
  /**
   * Gets the cloud URL for an image
   * @param fileName - The filename generated by the backend
   * @returns Result containing the cloud URL
   */
  getImageUrl(fileName: string): Promise<Result<string>>;
  
  /**
   * Checks if an image is already synced
   * @param fileName - The filename to check
   * @returns True if the image is synced, false otherwise
   */
  isImageSynced(fileName: string): Promise<boolean>;
  
  /**
   * Gets the overall sync status for all images
   * @returns Current sync status statistics
   */
  getSyncStatus(): Promise<SyncStatus>;
  
  /**
   * Retries failed sync operations
   * @param maxRetries - Maximum number of retries to attempt
   * @returns Result indicating success or failure
   */
  retryFailedSyncs(maxRetries?: number): Promise<Result<void>>;
  
  /**
   * Syncs all pending images in batch
   * @param batchSize - Number of images to sync in parallel
   * @returns Result indicating success or failure
   */
  syncPendingImages(batchSize?: number): Promise<Result<void>>;
  
  /**
   * Clears sync records for deleted images
   * @param recipeId - Recipe ID to clear records for
   * @returns Result indicating success or failure
   */
  clearSyncRecords(recipeId: string): Promise<Result<void>>;
  
  /**
   * Gets sync record for a specific image
   * @param imageUri - Local file URI
   * @returns Sync record or null if not found
   */
  getSyncRecord(imageUri: string): Promise<ImageSyncRecord | null>;
  
  /**
   * Gets all sync records
   * @returns Array of all sync records
   */
  getAllSyncRecords(): Promise<ImageSyncRecord[]>;
  
  /**
   * Gets sync records for a specific recipe
   * @param recipeId - Recipe ID
   * @returns Array of sync records for the recipe
   */
  getSyncRecordsForRecipe(recipeId: string): Promise<ImageSyncRecord[]>;
}
