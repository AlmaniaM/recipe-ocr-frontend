/**
 * Image Sync Record Entity
 * 
 * Represents the synchronization state of an image between local device
 * and cloud storage. Tracks sync status, timestamps, and error information.
 */

export interface ImageSyncRecord {
  /** Local file URI on the device */
  localUri: string;
  
  /** Unique filename generated by the backend storage service */
  fileName: string;
  
  /** Associated recipe ID */
  recipeId: string;
  
  /** Whether the image has been successfully synced to cloud storage */
  isSynced: boolean;
  
  /** Timestamp when the image was successfully synced */
  syncedAt: Date;
  
  /** Timestamp of the last sync attempt or status check */
  lastChecked: Date;
  
  /** Whether the last sync attempt resulted in an error */
  hasError?: boolean;
  
  /** Error message from the last failed sync attempt */
  errorMessage?: string;
  
  /** Number of retry attempts made */
  retryCount?: number;
  
  /** Size of the image file in bytes */
  fileSize?: number;
  
  /** MIME type of the image */
  contentType?: string;
}

/**
 * Creates a new ImageSyncRecord with default values
 */
export function createImageSyncRecord(
  localUri: string,
  fileName: string,
  recipeId: string,
  overrides: Partial<ImageSyncRecord> = {}
): ImageSyncRecord {
  const now = new Date();
  
  return {
    localUri,
    fileName,
    recipeId,
    isSynced: false,
    syncedAt: now,
    lastChecked: now,
    hasError: false,
    errorMessage: undefined,
    retryCount: 0,
    fileSize: undefined,
    contentType: undefined,
    ...overrides
  };
}

/**
 * Updates an ImageSyncRecord with sync success
 */
export function markSyncSuccess(record: ImageSyncRecord): ImageSyncRecord {
  return {
    ...record,
    isSynced: true,
    syncedAt: new Date(),
    lastChecked: new Date(),
    hasError: false,
    errorMessage: undefined,
    retryCount: record.retryCount || 0
  };
}

/**
 * Updates an ImageSyncRecord with sync failure
 */
export function markSyncFailure(
  record: ImageSyncRecord, 
  errorMessage: string
): ImageSyncRecord {
  return {
    ...record,
    isSynced: false,
    lastChecked: new Date(),
    hasError: true,
    errorMessage,
    retryCount: (record.retryCount || 0) + 1
  };
}

/**
 * Updates an ImageSyncRecord with retry attempt
 */
export function markRetryAttempt(record: ImageSyncRecord): ImageSyncRecord {
  return {
    ...record,
    lastChecked: new Date(),
    retryCount: (record.retryCount || 0) + 1
  };
}
